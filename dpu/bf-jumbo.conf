# UPDATE_DPU_OS - Update/Install BlueField Operating System (Default: yes)
UPDATE_DPU_OS="yes"
# openssl passwd -1 "<clear_password>"
ubuntu_PASSWORD='..................................'

###############################################################################
# Other misc configuration
###############################################################################

# MAC address of the rshim network interface (tmfifo_net0).
NET_RSHIM_MAC=00:1a:ca:ff:ff:11
MTU=9000

# bfb_modify_os â€“ SHELL function called after the file system is extracted on the target partitions.
# It can be used to modify files or create new files on the target file system mounted under
# /mnt. So the file path should look as follows: /mnt/<expected_path_on_target_OS>. This
# can be used to run a specific tool from the target OS (remember to add /mnt to the path for
# the tool).

bfb_modify_os()
{
    # Set hostname
    local hname="worker-dpu"
    echo ${hname} > /mnt/etc/hostname
    echo "127.0.0.1 ${hname}" >> /mnt/etc/hosts

    # Overwrite the tmfifo_net0 interface to set correct IP address
    # This is relevant in case of multiple DPU system.
    cat << EOFNET > /mnt/var/lib/cloud/seed/nocloud-net/network-config
version: 2
renderer: NetworkManager
ethernets:
  tmfifo_net0:
    dhcp4: false
    addresses:
      - 192.168.100.2/30
  oob_net0:
    dhcp4: true
    dhcp6: true
EOFNET

    # Modules for kubernetes and DPDK
    cat << EOFMODULES >> /mnt/etc/modules-load.d/custom.conf
overlay
br_netfilter
vfio_pci
EOFMODULES

    # sysctl settings for kubernets
    cat << EOFSYSCTL >> /mnt/etc/sysctl.d/kubernetes.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOFSYSCTL

    # Provision hugepages as part of grub boot
    # Default to 2M hugepage size and provision 24.5 GB of hugepages
    # TMM requires 1.5GB of hugepages per thread (CPU core) totaling
    # 24GB to run on all 16 threads of the DPU.
    local hpage_grub="default_hugepagesz=2MB hugepagesz=2M hugepages=8192"
    sed -i -E "s|^(GRUB_CMDLINE_LINUX=\")(.*)\"|\1${hpage_grub}\"|" /mnt/etc/default/grub
    ilog "$(chroot /mnt env PATH=$PATH /usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg)"

    # Provision SF to be used by the TMM on each PF
    rm -f /mnt/etc/mellanox/mlnx-sf.conf
    for pciid in $(lspci -nD 2> /dev/null | grep 15b3:a2d[26c] | awk '{print $1}')
        do
            cat << EOFSF >> /mnt/etc/mellanox/mlnx-sf.conf
/sbin/mlnx-sf --action create --device $pciid --sfnum 0 --enable-trust --hwaddr $(uuidgen | sed -e 's/-//;s/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')
/sbin/mlnx-sf --action create --device $pciid --sfnum 1 --enable-trust --hwaddr $(uuidgen | sed -e 's/-//;s/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')
/sbin/mlnx-sf --action create --device $pciid --sfnum 2 --enable-trust --hwaddr $(uuidgen | sed -e 's/-//;s/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')
EOFSF
        done

# F5 BNK 2.0.0 GA defaults:
#     OVS_BRIDGE1="sf_external"
#     OVS_BRIDGE1_PORTS="p0 en3f0pf0sf1"
#     OVS_BRIDGE2="sf_internal"
#     OVS_BRIDGE2_PORTS="p1 en3f1pf1sf1 pf1vf0"

    cat <<EOFSF > /mnt/etc/mellanox/mlnx-ovs.conf
CREATE_OVS_BRIDGES="yes"
OVS_BRIDGE1="br-lag"
OVS_BRIDGE1_PORTS="bond0 pf0hpf en3f0pf0sf0 en3f0pf0sf1 en3f0pf0sf2 en3f1pf1sf0 en3f1pf1sf1 en3f1pf1sf2 pf0vf0 pf0vf1 pf0vf2 pf0vf3"
OVS_BRIDGE2=""
OVS_BRIDGE2_PORTS="dummy" # prevents bridge2 from being created
OVS_HW_OFFLOAD="yes"
OVS_TC_OFFLOAD="yes"      # Enables TC offload on interfaces
OVS_CT_OFFLOAD="yes"      # Enables connection tracking offload (if supported)
OVS_TIMEOUT=300
OVS_BR_PORTS_TIMEOUT=30
EOFSF

    cat <<EOFBF >> /mnt/etc/mellanox/mlnx-bf.conf
LAG_HASH_MODE="yes"
EOFBF

    # Cloud-init for upgrading containerd and runc
    cat << EOFCLOUDINIT >> /mnt/var/lib/cloud/seed/nocloud-net/user-data
write_files:
  - path: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
    permissions: '0644'
    content: |
       network: {config: disabled}

  - path: /etc/systemd/system/bond0.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Bond Service
      After=network.target

      [Service]
      Type=oneshot
      ExecStart=/bin/bash /usr/local/sbin/create-bond0.sh
      RemainAfterExit=no

      [Install]
      WantedBy=multi-user.target

  - path: /etc/systemd/system/ovs-firewall.service
    permissions: '0644'
    content: |
      # /etc/systemd/system/ovs-firewall.service
      [Unit]
      Description=Set up ovs flow rules filters on bond0
      After=network-online.target openvswitch-switch.service
      Wants=network-online.target

      [Service]
      Type=oneshot
      ExecStart=/bin/bash -c '/usr/local/sbin/wait-for-br.sh && /usr/local/sbin/setup-ovs-flow-rules.sh'
      RemainAfterExit=no

      [Install]
      WantedBy=multi-user.target

  - path: /etc/systemd/system/openvswitch-switch.service.d/ovs-firewall-after.conf
    permissions: '0644'
    content: |
      [Service]
      ExecStartPost=/usr/local/sbin/wait-for-br.sh
      ExecStartPost=/usr/local/sbin/setup-ovs-flow-rules.sh

  - path: /usr/local/sbin/wait-for-br.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      for i in {1..30}; do
        ovs-vsctl br-exists br-lag && exit 0
        sleep 1
      done
      echo "Bridge br-lag not found after 30s" >&2
      exit 1

  - path: /usr/local/sbin/setup-ovs-flow-rules.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e

      echo "wait for br-lag ..."
      while ! ovs-vsctl br-exists br-lag; do sleep 5; done; echo "br-lag is ready"

      # enable Hardware Offload
      ovs-vsctl set Open_vSwitch . other_config:hw-offload=true
    
      # scalable functions dont inheret MTU from PF and aren't present
      # when create-bond0.sh is launched right after imaging the DPU. 
      # Hence placing this here, which gets called every time ovs restarts
      #
      for iface in \$(ovs-vsctl show | grep Port | awk '{print \$2}'); do
        echo "\$iface ..."
        ovs-vsctl set Interface \$iface mtu_request=$MTU
        ovs-vsctl list Interface \$iface | grep mtu
        ethtool -k \$iface | grep hw-tc-offload 2>/dev/null || echo "Interface $intf not found or doesn't support tc-offload"
        ethtool -K \$iface hw-tc-offload on 2>/dev/null && echo "$intf: enabled" || echo "$intf: failed or not supported"
      done

      # set vlan 200 on internal VF's
      # -> host VF's function untagged.

      ovs-vsctl set port pf0vf0 tag=200
      ovs-vsctl set port pf0vf1 tag=200
      ovs-vsctl set port pf0vf2 tag=200
      ovs-vsctl set port pf0vf3 tag=200

  - path: /usr/local/sbin/ovs-flows-named.sh
    permissions: '0755'
    content: |
      #!/usr/bin/env python3

      import subprocess
      import re
      import sys

      BRIDGE = sys.argv[1] if len(sys.argv) > 1 else "br-lag"
      portmap = {}

      # 1. Primary: ovs-ofctl show <bridge>
      ofctl = subprocess.run(["ovs-ofctl", "show", BRIDGE], capture_output=True, text=True).stdout
      for line in ofctl.splitlines():
          m = re.search(r'\s*(\d+)\(([^)]+)\):', line)
          if m:
              portmap[m.group(1)] = m.group(2)

      # 2. Secondary: ovs-vsctl list Interface
      vsctl = subprocess.run(["ovs-vsctl", "list", "Interface"], capture_output=True, text=True).stdout
      ofport, ifname = None, None
      for line in vsctl.splitlines():
          m = re.search(r'name\s*:\s*"([^"]+)"', line)
          if m:
              ifname = m.group(1)
          m = re.search(r'ofport\s*:\s*(-?\d+)', line)
          if m:
              ofport = m.group(1)
          if ifname and ofport:
              portmap.setdefault(ofport, ifname)
              ofport = None
              ifname = None

      # 3. Fallback: ovs-dpctl show
      dpctl = subprocess.run(["ovs-dpctl", "show"], capture_output=True, text=True).stdout
      for line in dpctl.splitlines():
          m = re.match(r'\s*port\s+(\d+):\s+(\S+)', line)
          if m:
              portmap.setdefault(m.group(1), m.group(2))

      # 4. Dump flows and rewrite in_port(N) with names
      flows = subprocess.run(
          ["ovs-appctl", "dpctl/dump-flows", "type=offloaded"],
          capture_output=True, text=True
      ).stdout

      for line in flows.strip().splitlines():
          line = re.sub(r'in_port\((\d+)\)', lambda m: f'in_port({portmap.get(m.group(1), "port" + m.group(1))})', line)
          print(line)

  - path: /usr/local/sbin/create-bond0.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "creating bond0 ..."
      ip link add bond0 type bond
      ip link set bond0 down
      ip link set bond0 type bond miimon 100 mode 4 lacp_rate fast xmit_hash_policy layer3+4
      ip link set p0 down
      ip link set p1 down
      #
      ip link set bond0 mtu $MTU
      ip link set p0 mtu $MTU
      ip link set p1 mtu $MTU
      #
      ip link set p0 master bond0
      ip link set p1 master bond0
      ip link set p0 up
      ip link set p1 up
      ip link set bond0 up
      # set MTU on pf0* representors
      while read -r line; do
        iface=\$(echo "\$line" | cut -d: -f1 | tr -d ' ')
        if [[ \$iface == pf0* ]]; then
          ip link set dev "\$iface" mtu "$MTU"
        fi
      done < <(tail -n +3 /proc/net/dev)

  - path: /var/tmp/setup-script.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      systemctl stop containerd kubelet kubepods.slice
      rm -rf /var/lib/containerd/*
      rm -rf /run/containerd/*
      rm -f /usr/lib/systemd/system/kubelet.service.d/90-kubelet-bluefield.conf
      systemctl daemon-reload
      mlxconfig -d /dev/mst/mt41692_pciconf0 -y s LAG_RESOURCE_ALLOCATION=1
      systemctl enable --now bond0.service
      systemctl enable --now ovs-firewall.service

runcmd:
  - [ /var/tmp/setup-script.sh ]
EOFCLOUDINIT
}
